import prism from 'prism';
import beautify from 'js-beautify';

/**
 * Code Component
 *
 * Applies syntax highlighting using prism and optionally beautifies code using js-beautify
 * This component should only be used as an attribute on `pre` tags.
 * Can also be optionally bound to a model
 *
 * @author Aaike Van Roekeghem <aaikevr@gmail.com>
 */
export class CodeComponent {

  static metadata() {
    return {
      id: "uiCode",
      type: 'directive',
      restrict: 'A',
      template: "<code></code>",
      transclude: true,
      link: "this.link",
      require: '?ngModel',
      scope: {
        model: '=ngModel',
        options: '=uiCode'
      }
    };
  }

  static options() {
    return {
      beautify: false
    };
  }

  static rawInject() { return ['$compile', '$parse']; }

  /**
   * Angular link function
   *
   * @param scope
   * @param element
   * @param attr
   * @param model
   * @param $transclude
   */

  link(scope, element, attr, model, $transclude) {
    this.model = model;

    this.language = CodeComponent.getLanguageFromClassname(this.element[0]);

    this.beautifyCode = (this.attr.beautify !== undefined && this.attr.beautify !== false);
    this.type = 'text';
    this.$code = this.element.find("code");

    //tranclude existing content
    $transclude((clone,innerScope)=>{this.transclude(clone,innerScope);});
  }

  /**
   * Translusion handler
   *
   * @param clone
   */
  transclude(clone) {
    if (!clone.length) return;
    //don't transclude if there is a model and it already has a value
    if (this.model && this.model.$modelValue) return;

    var data = "";
    for (var i = 0; i < clone.length; i++) {
      switch (clone[i].nodeType) {
        case 1: // Node.ELEMENT_NODE
          if (clone[i] instanceof HTMLTemplateElement) { // jshint ignore:line
            var node = document.importNode(clone[i].content, true);
            var div = document.createElement("div");
            div.appendChild(node);
            data += div.innerHTML.trim();
            this.type = 'dom';
          } else {
            data += clone[i].innerHTML;
          }
          break;
        case 3: // Node.TEXT_NODE
          data += clone[i].data;
          break;
        //case 7: // Node.PROCESSING_INSTRUCTION_NODE
        //  break;
        //case 8: // Node.COMMENT_NODE
        //  break;
        //case 9: // Node.DOCUMENT_NODE
        //  break;
        //case 10: // Node.DOCUMENT_TYPE_NODE
        //  break;
        //case 11: // Node.DOCUMENT_FRAGMENT_NODE
      }
    }

    //update the model to update the view (always beautify the transcluded content first)
    if (this.model) this.model.$setViewValue(CodeComponent.beautify(data, this.language));

    setTimeout(()=> {
      this.value = data;
    });
  }

  //--------------------------- Binding Handlers

  modelChanged(v) {
    setTimeout(()=>{
      this.value = v;
    });
  }

  //--------------------------- getters/setters

  /**
   * Get raw code content
   * @returns {String}
   */
  get rawValue() {
    return this.element.innerText;
  }

  /**
   * Set code content without highlighting
   * @param code {String}
   */
  set rawValue(code) {
    //store original code
    if (this.type === "text") {
      this.$code.html(code);
    } else {
      this.$code.text(code);
    }
  }

  /**
   * Get content as syntax highlighted html markup
   * @returns {String}
   */
  get value() {
    return this.$code.html();
  }

  /**
   * Set code and hightlight/beautify as needed
   * @param code {String}
   */
  set value(code) {
    if (!code) return;
    code = code.trim();

    if (this.beautifyCode) {
      code = CodeComponent.beautify(code, this.language);
    }

    this.rawValue = code;

    //compile and interpolate values if specified (has to happen before highlighting)
    if (this.attr.template !== undefined && this.attr.template !== false) {
      if (!this.templateCode) this.templateCode = this.$code;
      this.$compile(this.templateCode)(this);
      //set the new content generated by angular as the new raw content
      this.rawValue = this.$code.html();
    }

    prism.highlightElement(this.$code[0]);
  }

  //--------------------------- Helper methods

  /**
   * Beautifies html, css or js code
   *
   * @param code {String}       String containing code
   * @param language {String}   Code language (html, js or css)
   *
   * @returns {String} Beautified code
   */
  static beautify(code, language) {
    if (!code) return null;
    //trim every line
    code = code.split('\n').map((l) => l.trim()).join('\n');

    switch (language) {
      case 'js':
      case 'javascript':
        code = beautify.js(code);
        break;
      case 'css':
      case 'less':
        code = beautify.css(code);
        break;
      case 'html':
      case 'markup':
        if (code.indexOf("<") !== -1) {
          code = beautify.html(code);
        } else {
          code = CodeComponent.escapeHtml(beautify.html(CodeComponent.unescapeHtml(code)));
        }
        break;
    }
    return code;
  }

  /**
   * Gets the language for this component by analyzing the classnames
   * This is done for compatibility with Prism and Markdown
   *
   * @param el {HTMLElement}
   * @returns {String|null}
   */
  static getLanguageFromClassname(el) {
    var classes = el.className.split(" ");
    for (var i = 0; i < classes.length; i++) {
      var className = classes[i];
      var token = "language-";
      if (className.substr(0, token.length) === token)
        return className.substr(token.length);
    }
    return null;
  }

  /**
   * Escape html code
   *
   * @param html {String}
   * @returns {String}
   */
  static escapeHtml(html) {
    return html
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
  }

  /**
   * Unescape html code
   *
   * @param html {String}
   * @returns {String}
   */
  static unescapeHtml(html) {
    return html
    .replace(/&amp;/g, "&")
    .replace(/&lt;/g, "<")
    .replace(/&gt;/g, ">")
    .replace(/&quot;/g, "\"")
    .replace(/&#039;/g, "'");
  }

}
